
import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.awt.print.Book;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author adp5384
 */
public class FinalProj extends javax.swing.JFrame {

    /**
     * Creates new form M10P1
     */
    public FinalProj() {
        initComponents();
        canvasw = canvas.getWidth();
        canvash = canvas.getHeight();
        bg = canvas.createImage(canvasw, canvash);
       // fg = canvas.createImage(canvasw, canvash);
        fg = bg;
        ac = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, (float) alphaSetting.getValue() / 100);
        isTexture = false;
        preview();
    }

    int oldx, oldy, newx, newy, pSize = 1, canvasw, canvash, rgb;               //initialize oldx, oldy, newx, newy variables
    Image bg, fg, bbg;                                                          //create bg fg bbg images
    ImageIcon ii;                                                               //create imageicon ii
    static Color co;                                                            //initialize color co
    static Shape s = new defDraw();                                                    //initialize s to defualt draw
    Circle c = new Circle();                                                    //create c object
    defDraw dd = new defDraw();                                                 //create dd object            
    Line l = new Line();                                                        //create l object
    FreeHand fh = new FreeHand();                                               //creat fh object
    Text t = new Text();                                                        //create t object
    Rect r = new Rect();                                                        //create r object
    RoundRect rr = new RoundRect();                                             //create rr object
    AlphaComposite ac;                                                          //create ac object
    Erase e = new Erase();                                                      //create e object
    float[] fa = {10, 10, 10};                                                  //create fa array
    BasicStroke bs = new BasicStroke(pSize, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 10, fa, 10);//create bs object
    BasicStroke sSize = new BasicStroke(pSize);                                 //create sSize obj
    Color c2;                                                                   //make color c2 
    Color c1;                                                                   //make color c1
    GradientPaint gp;                                                           //creat gp object 
    Image tImage;                                                               //create tImage obj
    Toolkit tk = Toolkit.getDefaultToolkit();                                   //create tk obj
    static Boolean isTexture;                                                   //create isTexture boolean
    static File f2 = null;                                                      //create file obj

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BottomPanel = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        RedSlider = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        GreenSlider = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        BlueSlider = new javax.swing.JSlider();
        jLabel6 = new javax.swing.JLabel();
        CoPre = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        sizeSlider = new javax.swing.JSlider();
        jPanel2 = new javax.swing.JPanel();
        ToolBar = new javax.swing.JToolBar();
        exitB = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        alphaSetting = new javax.swing.JSlider();
        fillCheck = new javax.swing.JCheckBox();
        ToolBar2 = new javax.swing.JToolBar();
        saveB = new javax.swing.JButton();
        loadB = new javax.swing.JButton();
        printB = new javax.swing.JButton();
        clearB = new javax.swing.JButton();
        eraserB = new javax.swing.JButton();
        fillB = new javax.swing.JToggleButton();
        colorC = new javax.swing.JToggleButton();
        cChooser = new javax.swing.JButton();
        textureC = new javax.swing.JToggleButton();
        gradientB = new javax.swing.JToggleButton();
        gradientCh = new javax.swing.JComboBox<>();
        FreeHandB = new javax.swing.JButton();
        rectButton = new javax.swing.JButton();
        rRecB = new javax.swing.JButton();
        lineB = new javax.swing.JButton();
        circleB = new javax.swing.JButton();
        dashed = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        LineSizeF = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        TextB = new javax.swing.JButton();
        textF = new javax.swing.JTextField();
        canvas = new javax.swing.JPanel();
        MenuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Save = new javax.swing.JMenuItem();
        Load = new javax.swing.JMenuItem();
        Print = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        BottomPanel.setLayout(new java.awt.GridLayout(1, 0));

        jPanel4.setLayout(new java.awt.BorderLayout());

        RedSlider.setForeground(new java.awt.Color(255, 0, 0));
        RedSlider.setMajorTickSpacing(50);
        RedSlider.setMaximum(255);
        RedSlider.setMinorTickSpacing(5);
        RedSlider.setPaintLabels(true);
        RedSlider.setPaintTicks(true);
        RedSlider.setValue(0);
        RedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                RedSliderStateChanged(evt);
            }
        });
        jPanel4.add(RedSlider, java.awt.BorderLayout.CENTER);

        jLabel4.setForeground(new java.awt.Color(255, 0, 0));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Red");
        jPanel4.add(jLabel4, java.awt.BorderLayout.PAGE_START);

        BottomPanel.add(jPanel4);

        jPanel6.setLayout(new java.awt.BorderLayout());

        GreenSlider.setForeground(new java.awt.Color(0, 255, 0));
        GreenSlider.setMajorTickSpacing(50);
        GreenSlider.setMaximum(255);
        GreenSlider.setMinorTickSpacing(5);
        GreenSlider.setPaintLabels(true);
        GreenSlider.setPaintTicks(true);
        GreenSlider.setValue(0);
        GreenSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                GreenSliderStateChanged(evt);
            }
        });
        jPanel6.add(GreenSlider, java.awt.BorderLayout.CENTER);

        jLabel5.setForeground(new java.awt.Color(0, 255, 0));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Green");
        jPanel6.add(jLabel5, java.awt.BorderLayout.PAGE_START);

        BottomPanel.add(jPanel6);

        jPanel5.setLayout(new java.awt.BorderLayout());

        BlueSlider.setForeground(new java.awt.Color(0, 0, 255));
        BlueSlider.setMajorTickSpacing(50);
        BlueSlider.setMaximum(255);
        BlueSlider.setMinorTickSpacing(5);
        BlueSlider.setPaintLabels(true);
        BlueSlider.setPaintTicks(true);
        BlueSlider.setValue(0);
        BlueSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                BlueSliderStateChanged(evt);
            }
        });
        jPanel5.add(BlueSlider, java.awt.BorderLayout.CENTER);

        jLabel6.setForeground(new java.awt.Color(0, 0, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Blue");
        jPanel5.add(jLabel6, java.awt.BorderLayout.PAGE_START);

        BottomPanel.add(jPanel5);

        javax.swing.GroupLayout CoPreLayout = new javax.swing.GroupLayout(CoPre);
        CoPre.setLayout(CoPreLayout);
        CoPreLayout.setHorizontalGroup(
            CoPreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 205, Short.MAX_VALUE)
        );
        CoPreLayout.setVerticalGroup(
            CoPreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        BottomPanel.add(CoPre);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Size");
        jPanel1.add(jLabel3, java.awt.BorderLayout.PAGE_START);

        sizeSlider.setMajorTickSpacing(20);
        sizeSlider.setMinorTickSpacing(5);
        sizeSlider.setPaintLabels(true);
        sizeSlider.setPaintTicks(true);
        sizeSlider.setValue(1);
        sizeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sizeSliderStateChanged(evt);
            }
        });
        jPanel1.add(sizeSlider, java.awt.BorderLayout.CENTER);

        BottomPanel.add(jPanel1);

        getContentPane().add(BottomPanel, java.awt.BorderLayout.PAGE_END);

        jPanel2.setLayout(new java.awt.BorderLayout());

        ToolBar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ToolBar.setRollover(true);

        exitB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/exit.png"))); // NOI18N
        exitB.setToolTipText("Exit");
        exitB.setFocusable(false);
        exitB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exitB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        exitB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBActionPerformed(evt);
            }
        });
        ToolBar.add(exitB);

        jLabel7.setText("Visibility");
        ToolBar.add(jLabel7);

        alphaSetting.setMajorTickSpacing(10);
        alphaSetting.setMinorTickSpacing(5);
        alphaSetting.setPaintLabels(true);
        alphaSetting.setPaintTicks(true);
        alphaSetting.setValue(100);
        alphaSetting.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                alphaSettingStateChanged(evt);
            }
        });
        ToolBar.add(alphaSetting);

        fillCheck.setText("Fill");
        fillCheck.setFocusable(false);
        fillCheck.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        fillCheck.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ToolBar.add(fillCheck);

        jPanel2.add(ToolBar, java.awt.BorderLayout.PAGE_END);

        ToolBar2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ToolBar2.setRollover(true);

        saveB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/saveBR.png"))); // NOI18N
        saveB.setToolTipText("Save");
        saveB.setFocusable(false);
        saveB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBActionPerformed(evt);
            }
        });
        ToolBar2.add(saveB);

        loadB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/loadB.png"))); // NOI18N
        loadB.setToolTipText("Load");
        loadB.setFocusable(false);
        loadB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loadB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        loadB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBActionPerformed(evt);
            }
        });
        ToolBar2.add(loadB);

        printB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/printB.png"))); // NOI18N
        printB.setToolTipText("Print Page");
        printB.setFocusable(false);
        printB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        printB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        printB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printBActionPerformed(evt);
            }
        });
        ToolBar2.add(printB);

        clearB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/clearB.png"))); // NOI18N
        clearB.setToolTipText("Clear canvas");
        clearB.setFocusable(false);
        clearB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        clearB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        clearB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBActionPerformed(evt);
            }
        });
        ToolBar2.add(clearB);

        eraserB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eraser.png"))); // NOI18N
        eraserB.setToolTipText("Eraser Tool");
        eraserB.setFocusable(false);
        eraserB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        eraserB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        eraserB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eraserBActionPerformed(evt);
            }
        });
        ToolBar2.add(eraserB);

        fillB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pBucket.png"))); // NOI18N
        fillB.setToolTipText("Paint Area");
        fillB.setFocusable(false);
        fillB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        fillB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        fillB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fillBActionPerformed(evt);
            }
        });
        ToolBar2.add(fillB);

        colorC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cCP.png"))); // NOI18N
        colorC.setToolTipText("Color Chooser");
        colorC.setFocusable(false);
        colorC.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        colorC.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        colorC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorCActionPerformed(evt);
            }
        });
        ToolBar2.add(colorC);

        cChooser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cChooser.png"))); // NOI18N
        cChooser.setToolTipText("Color Chooser");
        cChooser.setFocusable(false);
        cChooser.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cChooser.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cChooserActionPerformed(evt);
            }
        });
        ToolBar2.add(cChooser);

        textureC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/textureC.png"))); // NOI18N
        textureC.setToolTipText("Draw Texture");
        textureC.setFocusable(false);
        textureC.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        textureC.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        textureC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textureCActionPerformed(evt);
            }
        });
        ToolBar2.add(textureC);

        gradientB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gradientC.png"))); // NOI18N
        gradientB.setToolTipText("Set Gradient");
        gradientB.setFocusable(false);
        gradientB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gradientB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        gradientB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradientBActionPerformed(evt);
            }
        });
        ToolBar2.add(gradientB);

        gradientCh.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cyclic", "Acyclic" }));
        ToolBar2.add(gradientCh);

        FreeHandB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pencil.png"))); // NOI18N
        FreeHandB.setToolTipText("Draw Free Hand");
        FreeHandB.setFocusable(false);
        FreeHandB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        FreeHandB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        FreeHandB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FreeHandBActionPerformed(evt);
            }
        });
        ToolBar2.add(FreeHandB);

        rectButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rect.png"))); // NOI18N
        rectButton.setToolTipText("Draw rectangle");
        rectButton.setFocusable(false);
        rectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rectButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectButtonActionPerformed(evt);
            }
        });
        ToolBar2.add(rectButton);

        rRecB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rrect.png"))); // NOI18N
        rRecB.setToolTipText("Draw rounded rectangle");
        rRecB.setFocusable(false);
        rRecB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rRecB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rRecB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rRecBActionPerformed(evt);
            }
        });
        ToolBar2.add(rRecB);

        lineB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/line.png"))); // NOI18N
        lineB.setToolTipText("Draw line");
        lineB.setFocusable(false);
        lineB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lineB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lineB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineBActionPerformed(evt);
            }
        });
        ToolBar2.add(lineB);

        circleB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/circle.png"))); // NOI18N
        circleB.setToolTipText("Draw circle");
        circleB.setFocusable(false);
        circleB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        circleB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        circleB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circleBActionPerformed(evt);
            }
        });
        ToolBar2.add(circleB);

        dashed.setText("Dashed");
        dashed.setToolTipText("Draw Dashed Line");
        dashed.setFocusable(false);
        dashed.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        dashed.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        dashed.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ToolBar2.add(dashed);

        jLabel1.setText("    Line Size:");
        ToolBar2.add(jLabel1);

        LineSizeF.setText("1");
        LineSizeF.setMaximumSize(new java.awt.Dimension(60, 25));
        LineSizeF.setMinimumSize(new java.awt.Dimension(60, 25));
        LineSizeF.setPreferredSize(new java.awt.Dimension(60, 25));
        LineSizeF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                LineSizeFKeyReleased(evt);
            }
        });
        ToolBar2.add(LineSizeF);

        jLabel2.setText(" px");
        ToolBar2.add(jLabel2);

        TextB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/text.png"))); // NOI18N
        TextB.setToolTipText("Set Text Tool");
        TextB.setFocusable(false);
        TextB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        TextB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        TextB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextBActionPerformed(evt);
            }
        });
        ToolBar2.add(TextB);

        textF.setText("  ");
        textF.setMaximumSize(new java.awt.Dimension(100, 25));
        textF.setMinimumSize(new java.awt.Dimension(100, 25));
        textF.setPreferredSize(new java.awt.Dimension(100, 25));
        ToolBar2.add(textF);

        jPanel2.add(ToolBar2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        canvas.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                canvasMouseDragged(evt);
            }
        });
        canvas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                canvasMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                canvasMouseReleased(evt);
            }
        });
        canvas.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                canvasComponentResized(evt);
            }
        });

        javax.swing.GroupLayout canvasLayout = new javax.swing.GroupLayout(canvas);
        canvas.setLayout(canvasLayout);
        canvasLayout.setHorizontalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1028, Short.MAX_VALUE)
        );
        canvasLayout.setVerticalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 392, Short.MAX_VALUE)
        );

        getContentPane().add(canvas, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        Save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });
        jMenu1.add(Save);

        Load.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        Load.setText("Load");
        Load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadActionPerformed(evt);
            }
        });
        jMenu1.add(Load);

        Print.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        Print.setText("Print");
        Print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintActionPerformed(evt);
            }
        });
        jMenu1.add(Print);

        Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Exit);

        MenuBar.add(jMenu1);

        jMenu2.setText("Edit");
        MenuBar.add(jMenu2);

        setJMenuBar(MenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void clear() {
        bg = canvas.createImage(canvas.getWidth(), canvas.getHeight());     //create empty image on bg
        fg = canvas.createImage(canvas.getWidth(), canvas.getHeight());     //create empty image on fg
        repaint(); //call paint
    }

    private void preview() {
        Graphics gp = CoPre.getGraphics();                                      //get CoPre graphics
        Graphics2D g2dp = (Graphics2D) gp;                                      //create graphics2d obj
        g2dp.setColor(co);                                                      //set color
        if (!dashed.isSelected()) {                                             //if dash is selected
            g2dp.setStroke(sSize);                                              //set stroke
        } else {
            g2dp.setStroke(bs);                                                 //set stroke
        }
        g2dp.clearRect(0, 0, CoPre.getWidth(), CoPre.getHeight());              //clear rect
        g2dp.drawLine(0, 0, CoPre.getWidth(), CoPre.getHeight());               //draw line 
    }

    private void RedSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_RedSliderStateChanged
        co = new Color(RedSlider.getValue(), GreenSlider.getValue(), BlueSlider.getValue());   //get color
        preview();                                                //call preview
    }//GEN-LAST:event_RedSliderStateChanged

    private void GreenSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_GreenSliderStateChanged
        // TODO add your handling code here:
        co = new Color(RedSlider.getValue(), GreenSlider.getValue(), BlueSlider.getValue());//get color
        preview();                                                //call preview
    }//GEN-LAST:event_GreenSliderStateChanged

    private void BlueSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_BlueSliderStateChanged
        // TODO add your handling code here:
        co = new Color(RedSlider.getValue(), GreenSlider.getValue(), BlueSlider.getValue());//get color
        preview();                                                //call preview
    }//GEN-LAST:event_BlueSliderStateChanged

    private void canvasMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMousePressed
        // TODO add your handling code here:
        if (bg == null) {                                                       //if bg is null
            bg = canvas.createImage(canvas.getWidth(), canvas.getHeight());     //create empty image on bg
            fg = canvas.createImage(canvas.getWidth(), canvas.getHeight());     //create empty image on fg
        }
        sSize = new BasicStroke(pSize);                                         //make new stroke 
        co = new Color(RedSlider.getValue(), GreenSlider.getValue(), BlueSlider.getValue());//get color
        preview();                                                //call preview
        oldx = evt.getX();                                                      //get mouse x
        oldy = evt.getY();                                                      //get mouse y 
        if (textureC.isSelected()) {                                            //if textureC is selected
            isTexture = true;                                                   ///set to true
        } else {
            isTexture = false;                                                  //set to false
        }
        s.isT = isTexture;                                                      //set s.isT to isTexture
        if (fillB.isSelected()) {                                               //if fill button is selected
            s = dd;                                                             //set shape to defualt 
            fill();                                                             //fill
            Graphics fgg = fg.getGraphics();                                    //get fg graphics
            Graphics g = canvas.getGraphics();                                  //get canvas graphics
            fgg.drawImage(bg, 0, 0, null);                                      //draw bg
            g.drawImage(fg, 0, 0, null);                                        //draw fg
        }
        if (colorC.isSelected()) {                                              //if color chooser is being using
            s = dd;                                                             //set s to defualt to defualt draw
            getColor();                                                         //call get color
        }
    }//GEN-LAST:event_canvasMousePressed

    private void getColor() {
        BufferedImage img = (BufferedImage) bg;                                 //make new buffered image 
        int oRGB = img.getRGB(oldx, oldy);                                      //get rgb value of point 
        int r = (oRGB >> 16) & 0xFF;                                            //get r value
        int g = (oRGB >> 8) & 0xFF;                                             //get g value
        int b = oRGB & 0xFF;                                                    //get b value
        co = new Color(r, g, b);                                                  //make new color    
        RedSlider.setValue(r);                                                  //set redslider value
        GreenSlider.setValue(g);                                                //set greenslider value
        BlueSlider.setValue(b);                                                 //set blueslider value

    }

    private void canvasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseReleased
        // TODO add your handling code here:        
        Graphics bgg = bg.getGraphics();                                        //create graphics object from bg         
        s.text = textF.getText();                                               //set text
        bgg.drawImage(fg, 0, 0, null);                                          //draw fg image on bg
        s = s.s2;                                                               //set s to new s obj
    }//GEN-LAST:event_canvasMouseReleased

    private void canvasMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseDragged
        // TODO add your handling code here:]
        Graphics fgg = fg.getGraphics();                                        //get fg graphics
        Graphics g = canvas.getGraphics();                                      //get canvas graphics
        Graphics2D g2d = (Graphics2D) fgg;                                      //make g2d obj
        g2d.setComposite(ac);                                                   //set composite
        fgg.drawImage(bg, 0, 0, null);                                          //draw background
        s.co = co;                                                              //set color
        s.f = f2;                                                               //set file
        newx = evt.getX();                                                      //set x
        newy = evt.getY();                                                      //set y 
        s.lnx = newx;                                                           //set s.lnx to newx
        s.lox = oldx;                                                           //set s.lox to oldx
        s.lny = newy;                                                           //set s.lny to newy
        s.loy = oldy;                                                           //set s.loy to oldy
        s.text = textF.getText();                                               //set text
        s.x = Math.min(oldx, newx);                                             //set s.x
        s.w = Math.abs(oldx - newx);                                            //set s.w
        s.y = Math.min(oldy, newy);                                             //set s.y
        s.h = Math.abs(oldy - newy);                                            //set s.h
        if (isTexture) {                                                        //if textured
            s.isT = true;                                                       //set isT to true
        }
        if (gradientB.isSelected()) {                                           //if gradient
            if (gradientCh.getSelectedIndex() == 0) {                           //if cyclic
                gp = new GradientPaint(0, 0, c1, this.getWidth() / 10, this.getHeight() / 10, c2, true);//set gradient
            } else if (s.getClass().equals(fh.getClass())) {                    //if freehand 
                gp = new GradientPaint(0, 0, c1, this.getWidth(), this.getHeight(), c2);//set gradient
            } else {
                gp = new GradientPaint(oldx, oldy, c1, newx, newy, c2);         //set gradient
            }
            g2d.setPaint(gp);                                                   //set gradient
            s.isG = true;                                                       //set true
        } else {
            s.isG = false;                                                      //set fals
        }
        if (fillCheck.isSelected()) {                                           //check if fill is selected
            s.isF = true;                                                       //set the is filled to true
        } else {
            s.isF = false;                                                      //set is filled to false
        }

        if (!dashed.isSelected()||s.getClass().equals(fh.getClass()) || s.getClass().equals(e.getClass())) {                                             //if dash is not selected
            s.isD = false;                                                      //set to false
            s.draw(g2d, sSize);                                                 //draw
        } else {
            s.isD = true;                                                       //set to true
            s.drawDashed(g2d, bs);                                              //draw
        }
        if (s.getClass().equals(fh.getClass()) || s.getClass().equals(e.getClass())) {//compare class, check if free hand or eraser
            Graphics bgg = bg.getGraphics();                                    //create graphics object from bg 
            bgg.drawImage(fg, 0, 0, null);                                      //draw fg image on bg
            oldx = newx;                                                        //change oldx
            oldy = newy;                                                        //change oldy
        }
        
        
        g.drawImage(fg, 0, 0, null);                                            //draw fg
    }//GEN-LAST:event_canvasMouseDragged

    private void exit() {
        System.exit(0);                                                         //closes the program
    }

    private void canvasComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_canvasComponentResized
        // TODO add your handling code here:
        //calls paint
        if (canvas.getWidth() > canvasw) {                                      //compare canvas width to max w
            canvasw = canvas.getWidth();                                        //set max w to canvas w
            bg = canvas.createImage(canvasw, canvash);                          //make new bg 
        }
        if (canvas.getHeight() > canvash) {                                     //compare canvas height and max h
            canvash = canvas.getHeight();                                       //set max h to canvas h 
            bg = canvas.createImage(canvasw, canvash);                          //make new bg
        }
        Graphics bgg = bg.getGraphics();                                        //create graphics object fro bg 
        bgg.drawImage(fg, 0, 0, null);                                          //draw fg image on bg
        repaint();                                                              //call paint
        preview();                                                              //call preview
    }//GEN-LAST:event_canvasComponentResized

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        save();
    }//GEN-LAST:event_SaveActionPerformed

    private void save() {
        JFileChooser chooser = new JFileChooser();                              //new chooser
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Object & PNG Files", "obj", "png");//make filter
        chooser.setFileFilter(filter);                                          //set filter
        if (JFileChooser.APPROVE_OPTION == chooser.showSaveDialog(null)) {      //if jfile approved
            try {
                File f = chooser.getSelectedFile();                             //select file
                ImageIO.write((RenderedImage) bg, "png", f);                    //rite image
            } catch (Exception ex) {
                Logger.getLogger(FinalProj.class.getName()).log(Level.SEVERE, null, ex);//catch
            }
        }
    }

    private void print() {
        ii = new ImageIcon(bg);                                                 //new image
        PrinterJob pj = PrinterJob.getPrinterJob();                             //new print job
        PageFormat pf = pj.pageDialog(new PageFormat());                        //new print format
        if (pj.printDialog()) {
            Book b = new Book();                                                //new book
            Printable printable = new MyPrintable(ii.getImage());               //make new printable
            b.append(printable, pf);                                            //append to book
            pj.setPageable(b);                                                  //set pageable
            try {
                pj.print();                                                     //print
            } catch (PrinterException ex) {
                Logger.getLogger(FinalProj.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void LoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadActionPerformed
        // TODO add your handling code here:
        load();//call load
    }//GEN-LAST:event_LoadActionPerformed

    private void load() {
        JFileChooser chooser = new JFileChooser();                              //new file chooser
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Object & Png files", "obj", "png");//make filter
        chooser.setFileFilter(filter);                                          //set filter
        Graphics bgg = bg.getGraphics();                                        //get bg graphics
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File f = chooser.getSelectedFile();                                 //get file
            try {
                BufferedImage b = ImageIO.read(f);                              //make new buffered image
                clear();                                                        //calll clear
                bg = canvas.createImage(canvas.getWidth(), canvas.getHeight()); //create empty image on bg
                bg = b;                                                         //set bg to b
                Graphics g1 = canvas.getGraphics();                             //make new graphics
                g1.drawImage(b, 0, 0, null);                                    //draw image
                g1 = bg.getGraphics();                                          //get graphics
                g1.drawImage(b, 0, 0, null);                                    //draw image
            } catch (Exception ex) {
                Logger.getLogger(FinalProj.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        bgg.drawImage(bg, 0, 0, null);                                          //draw image
    }

    private void fill() {
        BufferedImage img = (BufferedImage) bg;                                 //create buffered image
        int coRGB = co.getRGB();                                                //make coRGB
        int oRGB = img.getRGB(oldx, oldy);                                      //make oRGB
        Stack<Point> p = new Stack();                                           //make point stack
        p.add(new Point(oldx, oldy));                                           //add point
        while (!p.isEmpty()) {                                                  //while p is empty
            Point p2 = p.pop();                                                 //pop one off the top
            rgb = img.getRGB(p2.x, p2.y);                                       //get rgb
            if (rgb != coRGB && rgb == oRGB) {                                  //if target color does not = replace color and target does not = img rgb
                img.setRGB(p2.x, p2.y, coRGB);                                  //set rgb
                if (p2.y < img.getHeight() - 1) {                               //north point
                    p.push(new Point(p2.x, p2.y + 1));
                }
                if (p2.y > 1) {                                                 //south point
                    p.push(new Point(p2.x, p2.y - 1));
                }
                if (p2.x > 1) {                                                 //west point
                    p.push(new Point(p2.x - 1, p2.y));
                }
                if (p2.x < img.getWidth() - 1) {                                //east point
                    p.push(new Point(p2.x + 1, p2.y));
                }
            }

        }
    }

    private void PrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrintActionPerformed
        // TODO add your handling code here:
        print();// call print
    }//GEN-LAST:event_PrintActionPerformed

    private void sizeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sizeSliderStateChanged
        // TODO add your handling code here:
        LineSizeF.setText(String.valueOf(sizeSlider.getValue()));               //get text
        sSize = new BasicStroke(sizeSlider.getValue());                         //make new basic stroke
        pSize = Integer.valueOf(LineSizeF.getText());                           //set pixel size
        bs = new BasicStroke(pSize, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 10, fa, 10);//make new basic stroke
        preview();                                                //call preview
    }//GEN-LAST:event_sizeSliderStateChanged

    private void LineSizeFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LineSizeFKeyReleased
        // TODO add your handling code here:
        String sf = LineSizeF.getText();                                        //get text
        if (!(sf.equals(""))) {                                                 //make sure sf isnt null
            sizeSlider.setValue(Integer.valueOf(LineSizeF.getText()));          //set size slider value
            sSize = new BasicStroke(Integer.valueOf(LineSizeF.getText()));      //make new basic stroke
            pSize = Integer.valueOf(LineSizeF.getText());                           //set pixel size
            bs = new BasicStroke(pSize, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 10, fa, 10);//make new basic stroke
        }
        preview();                                                //call preview
    }//GEN-LAST:event_LineSizeFKeyReleased

    private void eraserBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eraserBActionPerformed
        // TODO add your handling code here:
        s = e;
        fillB.setSelected(false);                                               //set fillb to false
        colorC.setSelected(false);                                              //set color c to false
        canvas.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));                    //set cursor to defualt
    }//GEN-LAST:event_eraserBActionPerformed

    private void FreeHandBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FreeHandBActionPerformed
        // TODO add your handling code here:
        s = fh;
        fillB.setSelected(false);                                               //set fillb to false
        colorC.setSelected(false);                                              //set color c to false
        Toolkit toolkit = Toolkit.getDefaultToolkit();                      //make new toolkit
        Image img = toolkit.getImage("/pencilC.gif");               //make new cursor image
        Cursor customCursor = toolkit.createCustomCursor(img, new Point(0, 0), "Cursor");//make cursor
        canvas.setCursor(customCursor);
    }//GEN-LAST:event_FreeHandBActionPerformed

    private void printBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printBActionPerformed
        // TODO add your handling code here:
        print();                                                                //call print
    }//GEN-LAST:event_printBActionPerformed

    private void loadBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBActionPerformed
        // TODO add your handling code here:
        load();                                                                 //call load
    }//GEN-LAST:event_loadBActionPerformed

    private void saveBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBActionPerformed
        save();                                                                 //call save
    }//GEN-LAST:event_saveBActionPerformed

    private void TextBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextBActionPerformed
        // TODO add your handling code here: 
        s = t;                                                                  //set s to t
        fillB.setSelected(false);                                               //set fillb to false
        colorC.setSelected(false);                                              //set color c to false
        canvas.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));                    //set cursor to defualt
    }//GEN-LAST:event_TextBActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:
        exit();                                                                 //call exit from menu
    }//GEN-LAST:event_ExitActionPerformed

    private void exitBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBActionPerformed
        // TODO add your handling code here:
        exit();                                                                 //call exit from button
    }//GEN-LAST:event_exitBActionPerformed

    private void alphaSettingStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_alphaSettingStateChanged
        // TODO add your handling code here:
        ac = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, (float) alphaSetting.getValue() / 100);//make ac
    }//GEN-LAST:event_alphaSettingStateChanged

    private void gradientBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradientBActionPerformed
        // TODO add your handling code here:
        if (gradientB.isSelected()) {
            c1 = JColorChooser.showDialog(this, "Color Selector", null);        //choose color
            c2 = JColorChooser.showDialog(this, "Color Selector", null);        //choose color
        }
    }//GEN-LAST:event_gradientBActionPerformed

    private void fillBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fillBActionPerformed
        // TODO add your handling code here:
        if (fillB.isSelected()) {                                               //if fill b is choosen
            Toolkit toolkit = Toolkit.getDefaultToolkit();                      //make new toolkit
            Image img = toolkit.getImage("/pBucket.gif");               //make new cursor image
            Cursor customCursor = toolkit.createCustomCursor(img, new Point(0, 0), "Cursor");//make cursor
            canvas.setCursor(customCursor);                                     //set cursor
        } else {
            canvas.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));                //reset cursor
        }
        colorC.setSelected(false);                                              //set color c to false
    }//GEN-LAST:event_fillBActionPerformed

    private void cChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cChooserActionPerformed
        // TODO add your handling code here:
        Color co2 = JColorChooser.showDialog(this, "Color Selector", null);     //get color
        if (co2 != null) {                                                      //if color is null
            RedSlider.setValue(co2.getRed());                                   //set redslider
            GreenSlider.setValue(co2.getGreen());                               //set green slider
            BlueSlider.setValue(co2.getBlue());                                 //set blue slider
        }
        preview();                                                              //call preview
    }//GEN-LAST:event_cChooserActionPerformed

    private void textureCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textureCActionPerformed
        // TODO add your handling code here:
        if (textureC.isSelected()) {                                            //if textured is choosen
            isTexture = true;                                                   //set texture to true
            JFileChooser jc = new JFileChooser();                               //ne f chooser
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Png files", "png");//filter
            jc.setFileFilter(filter);                                           //set filter
            if (JFileChooser.APPROVE_OPTION == jc.showOpenDialog(null)) {
                f2 = jc.getSelectedFile();                                      //get file
            }
        } else {
            isTexture = false;                                                  //set to false
        }
    }//GEN-LAST:event_textureCActionPerformed

    private void colorCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorCActionPerformed
        // TODO add your handling code here:
        fillB.setSelected(false);                                               //set fill b to false
//        canvas.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));                    //set cursor to defualt
        if (colorC.isSelected()) {
            Toolkit toolkit = Toolkit.getDefaultToolkit();
            Image cursorImage = toolkit.getImage("/cCP.gif");
            Point cursorHotSpot = new Point(0, 0);
            Cursor customCursor = toolkit.createCustomCursor(cursorImage, cursorHotSpot, "Cursor");
            canvas.setCursor(customCursor);
        } else {
            canvas.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_colorCActionPerformed

    private void rectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectButtonActionPerformed
        // TODO add your handling code here:
         s = r;                                                                  //set s = to r
        fillB.setSelected(false);                                               //set fillb to false
        colorC.setSelected(false);                                              //set color c to false
        canvas.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));                    //set cursor to defualt
    }//GEN-LAST:event_rectButtonActionPerformed

    private void rRecBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rRecBActionPerformed
        // TODO add your handling code here:
        s = rr;                                                                 //set s = to rr
        fillB.setSelected(false);                                               //set fillb to false
        colorC.setSelected(false);                                              //set color c to false
        canvas.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));                    //set cursor to defualt        
    }//GEN-LAST:event_rRecBActionPerformed

    private void lineBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineBActionPerformed
        // TODO add your handling code here:              
        s = l;                                                                  //set s = to l
        fillB.setSelected(false);                                               //set fillb to false
        colorC.setSelected(false);                                              //set color c to false
        canvas.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));                    //set cursor to defualt
    }//GEN-LAST:event_lineBActionPerformed

    private void circleBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circleBActionPerformed
        // TODO add your handling code here:              
        s = c;                                                                  //set s = to c
        fillB.setSelected(false);                                               //set fillb to false
        colorC.setSelected(false);                                              //set color c to false
        canvas.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));                    //set cursor to defualt
    }//GEN-LAST:event_circleBActionPerformed

    private void clearBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBActionPerformed
        // TODO add your handling code here:
        clear(); 
    }//GEN-LAST:event_clearBActionPerformed

    public void paint(Graphics g) {                                             //paint
        super.paint(g);
        Graphics ng = canvas.getGraphics();                                     //gets canvas graphics and makes new graphics object ng
        ng.drawImage(bg, 0, 0, null);                                           //draws bg image on ng
        fg = canvas.createImage(canvas.getWidth(), canvas.getHeight());         //create an empty image in fg
        Graphics fgg = fg.getGraphics();                                        //get fg graphics
        fgg.drawImage(bg, 0, 0, null);                                             //draws image on fgg
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FinalProj.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FinalProj.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FinalProj.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FinalProj.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FinalProj().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider BlueSlider;
    private javax.swing.JPanel BottomPanel;
    private javax.swing.JPanel CoPre;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JButton FreeHandB;
    private javax.swing.JSlider GreenSlider;
    private javax.swing.JTextField LineSizeF;
    private javax.swing.JMenuItem Load;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenuItem Print;
    private javax.swing.JSlider RedSlider;
    private javax.swing.JMenuItem Save;
    private javax.swing.JButton TextB;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JToolBar ToolBar2;
    private javax.swing.JSlider alphaSetting;
    private javax.swing.JButton cChooser;
    private javax.swing.JPanel canvas;
    private javax.swing.JButton circleB;
    private javax.swing.JButton clearB;
    private javax.swing.JToggleButton colorC;
    private javax.swing.JCheckBox dashed;
    private javax.swing.JButton eraserB;
    private javax.swing.JButton exitB;
    private javax.swing.JToggleButton fillB;
    private javax.swing.JCheckBox fillCheck;
    private javax.swing.JToggleButton gradientB;
    private javax.swing.JComboBox<String> gradientCh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton lineB;
    private javax.swing.JButton loadB;
    private javax.swing.JButton printB;
    private javax.swing.JButton rRecB;
    private javax.swing.JButton rectButton;
    private javax.swing.JButton saveB;
    private javax.swing.JSlider sizeSlider;
    private static javax.swing.JTextField textF;
    private javax.swing.JToggleButton textureC;
    // End of variables declaration//GEN-END:variables
}
